{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\App Web\\\\skill-tree\\\\src\\\\skillTree\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"antd\";\nimport Skill, { POSITION_SKILL } from \"./skill\";\nimport paladin from \"../asserts/data/paladin.json\";\nimport backgroundPaladin from \"../asserts/images/paladin/background_paladin.png\";\nimport { CHARACTER_CLASS } from \"../utils/enum\";\nimport styled from \"styled-components\";\nimport RootSkillTree from \"./rootSkillTree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BackgroundImage = styled.div`\n  position: absolute;\n  background-image: url(${backgroundPaladin});\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 1700px;\n  height: 1800px;\n  opacity: 0.6;\n  margin-left: -500px;\n`;\n_c = BackgroundImage;\nconst SkillTree = ({\n  character\n}) => {\n  _s();\n  const [data, setData] = useState(paladin);\n  const [container, setContainer] = useState(null);\n  const getDataSkillTree = () => {\n    switch (character) {\n      case CHARACTER_CLASS.PALADIN:\n        {\n          setData(paladin);\n          break;\n        }\n      default:\n      case POSITION_SKILL.MIDDLE:\n        {\n          setData(paladin);\n          break;\n        }\n    }\n  };\n  useEffect(() => {\n    setContainer(document.getElementById(\"container\"));\n  }, [container]);\n  useEffect(() => {\n    getDataSkillTree();\n    if (container) {\n      renderSkillTree();\n    }\n  });\n  const generateNodes = (item, top, left, parentPosition, skills, lineColor, skillColor) => {\n    if (item.nodes && item.nodes.length > 0) {\n      let topNode = top;\n      let leftNode = left;\n      let parentPositionNode = parentPosition;\n      item.nodes.forEach(item => {\n        topNode += addTop(item.position, parentPositionNode, item.id);\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\n        skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n          position: item.position,\n          top: topNode,\n          left: leftNode,\n          isSquare: item.isSquare,\n          lineColor: lineColor,\n          skillColor: skillColor,\n          imageSkill: item.image,\n          text: item.id,\n          parentsLines: item.parentsLines\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this));\n        parentPositionNode = item.position;\n        generateNodes(item, topNode, leftNode + 30, parentPositionNode, skills, lineColor, skillColor);\n      });\n    }\n    return skills;\n  };\n  const generateMainBranch = (items, lineColor, skillColor, topInit, leftInit) => {\n    let top = topInit;\n    let left = leftInit;\n    let parentPosition = null;\n    let first = true;\n    let skills = [];\n    items.forEach(item => {\n      top += addTop(item.position, parentPosition, item.id);\n      left += addLeft(item.position, parentPosition, item.id);\n      parentPosition = item.position;\n      skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n        firstSkill: first,\n        position: item.position,\n        top: top,\n        left: left,\n        isSquare: item.isSquare,\n        lineColor: lineColor,\n        skillColor: skillColor,\n        withoutLine: item.withoutLine,\n        imageSkill: item.image,\n        text: item.id,\n        parentsLines: item.parentsLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this));\n      skills = generateNodes(item, top + 30, left + 15, parentPosition, skills, lineColor, skillColor);\n    });\n    return skills;\n  };\n  const renderSkillTree = () => {\n    const {\n      itemsRoot,\n      itemsFirst,\n      itemsSecond,\n      itemsThird,\n      itemsFourth,\n      lineColor,\n      skillColor\n    } = data;\n    let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\n    skills = [generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450), generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0), generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450), generateMainBranch(itemsThird, lineColor, skillColor, 0, 480), generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900)];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: skills\n    }, void 0, false);\n  };\n  return data && /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BackgroundImage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          paddingTop: \"350px\",\n          paddingLeft: \"50px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(RootSkillTree, {\n          skillColor: data.skillColor,\n          lineColor: data.lineColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"relative\"\n          },\n          id: \"container\",\n          children: renderSkillTree()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(SkillTree, \"cTv8aQiQbF2Thv7k4wZp070dH+4=\");\n_c2 = SkillTree;\nSkillTree.propTypes = {\n  character: PropTypes.string\n};\nexport default SkillTree;\nvar _c, _c2;\n$RefreshReg$(_c, \"BackgroundImage\");\n$RefreshReg$(_c2, \"SkillTree\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","Col","Row","Skill","POSITION_SKILL","paladin","backgroundPaladin","CHARACTER_CLASS","styled","RootSkillTree","jsxDEV","_jsxDEV","Fragment","_Fragment","BackgroundImage","div","_c","SkillTree","character","_s","data","setData","container","setContainer","getDataSkillTree","PALADIN","MIDDLE","document","getElementById","renderSkillTree","generateNodes","item","top","left","parentPosition","skills","lineColor","skillColor","nodes","length","topNode","leftNode","parentPositionNode","forEach","addTop","position","id","addLeft","push","isSquare","imageSkill","image","text","parentsLines","fileName","_jsxFileName","lineNumber","columnNumber","generateMainBranch","items","topInit","leftInit","first","firstSkill","withoutLine","itemsRoot","itemsFirst","itemsSecond","itemsThird","itemsFourth","children","style","paddingTop","paddingLeft","_c2","propTypes","string","$RefreshReg$"],"sources":["D:/Documents/App Web/skill-tree/src/skillTree/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nimport Skill, { POSITION_SKILL } from \"./skill\";\r\nimport paladin from \"../asserts/data/paladin.json\";\r\nimport backgroundPaladin from \"../asserts/images/paladin/background_paladin.png\";\r\n\r\nimport { CHARACTER_CLASS } from \"../utils/enum\";\r\nimport styled from \"styled-components\";\r\nimport RootSkillTree from \"./rootSkillTree\";\r\n\r\nconst BackgroundImage = styled.div`\r\n  position: absolute;\r\n  background-image: url(${backgroundPaladin});\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  width: 1700px;\r\n  height: 1800px;\r\n  opacity: 0.6;\r\n  margin-left: -500px;\r\n`;\r\n\r\nconst SkillTree = ({ character }) => {\r\n  const [data, setData] = useState(paladin);\r\n  const [container, setContainer] = useState(null);\r\n\r\n  const getDataSkillTree = () => {\r\n    switch (character) {\r\n      case CHARACTER_CLASS.PALADIN: {\r\n        setData(paladin);\r\n        break;\r\n      }\r\n      default:\r\n      case POSITION_SKILL.MIDDLE: {\r\n        setData(paladin);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setContainer(document.getElementById(\"container\"));\r\n  }, [container]);\r\n\r\n  useEffect(() => {\r\n    getDataSkillTree();\r\n    if (container) {\r\n      renderSkillTree();\r\n    }\r\n  });\r\n\r\n  const generateNodes = (\r\n    item,\r\n    top,\r\n    left,\r\n    parentPosition,\r\n    skills,\r\n    lineColor,\r\n    skillColor\r\n  ) => {\r\n    if (item.nodes && item.nodes.length > 0) {\r\n      let topNode = top;\r\n      let leftNode = left;\r\n      let parentPositionNode = parentPosition;\r\n      item.nodes.forEach((item) => {\r\n        topNode += addTop(item.position, parentPositionNode, item.id);\r\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\r\n        skills.push(\r\n          <Skill\r\n            position={item.position}\r\n            top={topNode}\r\n            left={leftNode}\r\n            isSquare={item.isSquare}\r\n            lineColor={lineColor}\r\n            skillColor={skillColor}\r\n            imageSkill={item.image}\r\n            text={item.id}\r\n            parentsLines={item.parentsLines}\r\n          />\r\n        );\r\n        parentPositionNode = item.position;\r\n        generateNodes(\r\n          item,\r\n          topNode,\r\n          leftNode + 30,\r\n          parentPositionNode,\r\n          skills,\r\n          lineColor,\r\n          skillColor\r\n        );\r\n      });\r\n    }\r\n    return skills;\r\n  };\r\n\r\n  const generateMainBranch = (\r\n    items,\r\n    lineColor,\r\n    skillColor,\r\n    topInit,\r\n    leftInit\r\n  ) => {\r\n    let top = topInit;\r\n    let left = leftInit;\r\n    let parentPosition = null;\r\n    let first = true;\r\n    let skills = [];\r\n\r\n    items.forEach((item) => {\r\n      top += addTop(item.position, parentPosition, item.id);\r\n      left += addLeft(item.position, parentPosition, item.id);\r\n      parentPosition = item.position;\r\n\r\n      skills.push(\r\n        <Skill\r\n          firstSkill={first}\r\n          position={item.position}\r\n          top={top}\r\n          left={left}\r\n          isSquare={item.isSquare}\r\n          lineColor={lineColor}\r\n          skillColor={skillColor}\r\n          withoutLine={item.withoutLine}\r\n          imageSkill={item.image}\r\n          text={item.id}\r\n          parentsLines={item.parentsLines}\r\n        />\r\n      );\r\n      skills = generateNodes(\r\n        item,\r\n        top + 30,\r\n        left + 15,\r\n        parentPosition,\r\n        skills,\r\n        lineColor,\r\n        skillColor\r\n      );\r\n    });\r\n    return skills;\r\n  };\r\n\r\n  const renderSkillTree = () => {\r\n    const {\r\n      itemsRoot,\r\n      itemsFirst,\r\n      itemsSecond,\r\n      itemsThird,\r\n      itemsFourth,\r\n      lineColor,\r\n      skillColor,\r\n    } = data;\r\n    let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\r\n    skills = [\r\n      generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450),\r\n      generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0),\r\n      generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450),\r\n      generateMainBranch(itemsThird, lineColor, skillColor, 0, 480),\r\n      generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900),\r\n    ];\r\n\r\n    return <>{skills}</>;\r\n  };\r\n  return (\r\n    data && (\r\n      <>\r\n        <BackgroundImage></BackgroundImage>\r\n        <Row>\r\n          <Col\r\n            style={{\r\n              paddingTop: \"350px\",\r\n              paddingLeft: \"50px\",\r\n            }}\r\n          >\r\n            <RootSkillTree\r\n              skillColor={data.skillColor}\r\n              lineColor={data.lineColor}\r\n            />\r\n            <div style={{ position: \"relative\" }} id=\"container\">\r\n              {renderSkillTree()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\nSkillTree.propTypes = {\r\n  character: PropTypes.string,\r\n};\r\n\r\nexport default SkillTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}