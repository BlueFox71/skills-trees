{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\App Web\\\\skill-tree\\\\src\\\\skillTree\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"antd\";\nimport Skill, { POSITION_SKILL } from \"./skill\";\nimport paladin from \"../asserts/data/paladin.json\";\nimport { CHARACTER_CLASS } from \"../utils/enum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SkillTree = ({\n  character\n}) => {\n  _s();\n  const [data, setData] = useState(paladin);\n  const [container, setContainer] = useState(null);\n  const getDataSkillTree = () => {\n    switch (character) {\n      case CHARACTER_CLASS.PALADIN:\n        {\n          setData(paladin);\n          break;\n        }\n      default:\n      case POSITION_SKILL.MIDDLE:\n        {\n          setData(paladin);\n          break;\n        }\n    }\n  };\n  useEffect(() => {\n    setContainer(document.getElementById(\"container\"));\n  }, [container]);\n  useEffect(() => {\n    getDataSkillTree();\n    if (container) {\n      renderSkillTree();\n    }\n  });\n  const addTop = position => {\n    switch (position) {\n      case POSITION_SKILL.MIDDLE:\n      case POSITION_SKILL.MIDDLE:\n      case POSITION_SKILL.MIDDLE:\n        return 50;\n      default:\n        break;\n    }\n  };\n  const renderSkillTree = () => {\n    //console.log(document, divParent);\n    const {\n      items\n    } = data;\n    const skills = [];\n    const top = 0;\n    const left = 0;\n    items.forEach(item => {\n      console.log(item);\n      skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n        id: \"skill-1-1\",\n        position: item.position,\n        top: 0,\n        left: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this));\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: skills\n    }, void 0, false);\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      style: {\n        backgroundColor: \"yellow\",\n        width: \"500px\",\n        height: \"500px\",\n        paddingLeft: \"150px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\"\n        },\n        id: \"container\",\n        children: renderSkillTree()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(SkillTree, \"cTv8aQiQbF2Thv7k4wZp070dH+4=\");\n_c = SkillTree;\nSkillTree.propTypes = {\n  character: PropTypes.string\n};\nexport default SkillTree;\nvar _c;\n$RefreshReg$(_c, \"SkillTree\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","Col","Row","Skill","POSITION_SKILL","paladin","CHARACTER_CLASS","jsxDEV","_jsxDEV","Fragment","_Fragment","SkillTree","character","_s","data","setData","container","setContainer","getDataSkillTree","PALADIN","MIDDLE","document","getElementById","renderSkillTree","addTop","position","items","skills","top","left","forEach","item","console","log","push","id","fileName","_jsxFileName","lineNumber","columnNumber","children","style","backgroundColor","width","height","paddingLeft","_c","propTypes","string","$RefreshReg$"],"sources":["D:/Documents/App Web/skill-tree/src/skillTree/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nimport Skill, { POSITION_SKILL } from \"./skill\";\r\nimport paladin from \"../asserts/data/paladin.json\";\r\nimport { CHARACTER_CLASS } from \"../utils/enum\";\r\n\r\nconst SkillTree = ({ character }) => {\r\n  const [data, setData] = useState(paladin);\r\n  const [container, setContainer] = useState(null);\r\n\r\n  const getDataSkillTree = () => {\r\n    switch (character) {\r\n      case CHARACTER_CLASS.PALADIN: {\r\n        setData(paladin);\r\n        break;\r\n      }\r\n      default:\r\n      case POSITION_SKILL.MIDDLE: {\r\n        setData(paladin);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setContainer(document.getElementById(\"container\"));\r\n  }, [container]);\r\n\r\n  useEffect(() => {\r\n    getDataSkillTree();\r\n    if (container) {\r\n      renderSkillTree();\r\n    }\r\n  });\r\n\r\nconst addTop = (position) => {\r\nswitch (position) {\r\n  case POSITION_SKILL.MIDDLE:\r\n    case POSITION_SKILL.MIDDLE:\r\n      case POSITION_SKILL.MIDDLE:\r\n\r\n    return 50;\r\n  default:\r\n    break;\r\n}\r\n}\r\n\r\n  const renderSkillTree = () => {\r\n    //console.log(document, divParent);\r\n    const { items } = data;\r\n    const skills = [];\r\n    const top = 0;\r\n    const left = 0;\r\n    items.forEach((item) => {\r\n      console.log(item);\r\n\r\n      skills.push(\r\n        <Skill id=\"skill-1-1\" position={item.position} top={0} left={0} />\r\n      );\r\n    });\r\n\r\n    return <>{skills}</>;\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col\r\n        style={{\r\n          backgroundColor: \"yellow\",\r\n          width: \"500px\",\r\n          height: \"500px\",\r\n          paddingLeft: \"150px\",\r\n        }}\r\n      >\r\n        <div style={{ position: \"relative\" }} id=\"container\">\r\n          {renderSkillTree()}\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nSkillTree.propTypes = {\r\n  character: PropTypes.string,\r\n};\r\n\r\nexport default SkillTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}