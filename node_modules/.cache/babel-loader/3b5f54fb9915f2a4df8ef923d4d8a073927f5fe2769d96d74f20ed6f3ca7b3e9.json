{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\App Web\\\\skill-tree\\\\src\\\\skillTree\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"antd\";\nimport Skill from \"./skill\";\nimport RootSkillTree from \"./rootSkillTree\";\nimport { addLeft, addTop } from \"../utils/position\";\nimport { getDataSkillTree } from \"../utils/data\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SkillTree = ({\n  character,\n  visual,\n  points\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [remainingPoints, setRemainingPoints] = useState(points);\n  const renderSkillTree = () => {\n    const {\n      itemsRoot,\n      itemsFirst,\n      itemsSecond,\n      itemsThird,\n      itemsFourth,\n      lineColor,\n      skillColor\n    } = data;\n    let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\n    skills = [generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450), generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0), generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450), generateMainBranch(itemsThird, lineColor, skillColor, 0, 480), generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900)];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: skills\n    }, void 0, false);\n  };\n  const handleCheckedSkill = checked => {\n    setRemainingPoints(checked ? remainingPoints - 1 : remainingPoints + 1);\n  };\n  useEffect(() => {\n    setData(getDataSkillTree(character));\n  }, [character, setData]);\n  const generateNodes = (item, top, left, parentPosition, skills, lineColor, skillColor) => {\n    if (item.nodes && item.nodes.length > 0) {\n      let topNode = top;\n      let leftNode = left;\n      let parentPositionNode = parentPosition;\n      item.nodes.forEach(item => {\n        topNode += addTop(item.position, parentPositionNode, item.id);\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\n        skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n          position: item.position,\n          top: topNode,\n          left: leftNode,\n          isSquare: item.isSquare,\n          lineColor: lineColor,\n          skillColor: skillColor,\n          imageSkill: item.image,\n          text: item.id,\n          parentsLines: item.parentsLines,\n          onSelect: handleCheckedSkill\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this));\n        parentPositionNode = item.position;\n        generateNodes(item, topNode, leftNode + 30, parentPositionNode, skills, lineColor, skillColor);\n      });\n    }\n    return skills;\n  };\n  const generateMainBranch = (items, lineColor, skillColor, topInit, leftInit) => {\n    let top = topInit;\n    let left = leftInit;\n    let parentPosition = null;\n    let first = true;\n    let skills = [];\n    items.forEach(item => {\n      top += addTop(item.position, parentPosition, item.id);\n      left += addLeft(item.position, parentPosition, item.id);\n      parentPosition = item.position;\n      skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n        firstSkill: first,\n        position: item.position,\n        top: top,\n        left: left,\n        isSquare: item.isSquare,\n        lineColor: lineColor,\n        skillColor: skillColor,\n        withoutLine: item.withoutLine,\n        imageSkill: item.image,\n        text: item.id,\n        parentsLines: item.parentsLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this));\n      skills = generateNodes(item, top + 30, left + 15, parentPosition, skills, lineColor, skillColor);\n    });\n    return skills;\n  };\n  return data && /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"0 auto\",\n      width: \"1000px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          paddingTop: \"350px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(RootSkillTree, {\n          skillColor: data.skillColor,\n          lineColor: data.lineColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"relative\"\n          },\n          id: \"container\",\n          children: renderSkillTree()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 7\n  }, this);\n};\n_s(SkillTree, \"Capab4ng3+psE78OoHNf8u4h+BQ=\");\n_c = SkillTree;\nSkillTree.propTypes = {\n  character: PropTypes.string,\n  visual: PropTypes.bool,\n  points: PropTypes.number\n};\nexport default SkillTree;\nvar _c;\n$RefreshReg$(_c, \"SkillTree\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","Col","Row","Skill","RootSkillTree","addLeft","addTop","getDataSkillTree","Fragment","_Fragment","jsxDEV","_jsxDEV","SkillTree","character","visual","points","_s","data","setData","remainingPoints","setRemainingPoints","renderSkillTree","itemsRoot","itemsFirst","itemsSecond","itemsThird","itemsFourth","lineColor","skillColor","skills","generateMainBranch","children","handleCheckedSkill","checked","generateNodes","item","top","left","parentPosition","nodes","length","topNode","leftNode","parentPositionNode","forEach","position","id","push","isSquare","imageSkill","image","text","parentsLines","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","items","topInit","leftInit","first","firstSkill","withoutLine","style","margin","width","paddingTop","_c","propTypes","string","bool","number","$RefreshReg$"],"sources":["D:/Documents/App Web/skill-tree/src/skillTree/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nimport Skill from \"./skill\";\r\n\r\nimport RootSkillTree from \"./rootSkillTree\";\r\nimport { addLeft, addTop } from \"../utils/position\";\r\nimport { getDataSkillTree } from \"../utils/data\";\r\n\r\nconst SkillTree = ({ character, visual, points }) => {\r\n  const [data, setData] = useState(null);\r\n  const [remainingPoints, setRemainingPoints] = useState(points);\r\n  const renderSkillTree = () => {\r\n    const {\r\n      itemsRoot,\r\n      itemsFirst,\r\n      itemsSecond,\r\n      itemsThird,\r\n      itemsFourth,\r\n      lineColor,\r\n      skillColor,\r\n    } = data;\r\n    let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\r\n    skills = [\r\n      generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450),\r\n      generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0),\r\n      generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450),\r\n      generateMainBranch(itemsThird, lineColor, skillColor, 0, 480),\r\n      generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900),\r\n    ];\r\n\r\n    return <>{skills}</>;\r\n  };\r\n\r\n  const handleCheckedSkill = (checked) => {\r\n    setRemainingPoints(checked ? remainingPoints - 1 : remainingPoints + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setData(getDataSkillTree(character));\r\n  }, [character, setData]);\r\n\r\n  const generateNodes = (\r\n    item,\r\n    top,\r\n    left,\r\n    parentPosition,\r\n    skills,\r\n    lineColor,\r\n    skillColor\r\n  ) => {\r\n    if (item.nodes && item.nodes.length > 0) {\r\n      let topNode = top;\r\n      let leftNode = left;\r\n      let parentPositionNode = parentPosition;\r\n      item.nodes.forEach((item) => {\r\n        topNode += addTop(item.position, parentPositionNode, item.id);\r\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\r\n        skills.push(\r\n          <Skill\r\n            position={item.position}\r\n            top={topNode}\r\n            left={leftNode}\r\n            isSquare={item.isSquare}\r\n            lineColor={lineColor}\r\n            skillColor={skillColor}\r\n            imageSkill={item.image}\r\n            text={item.id}\r\n            parentsLines={item.parentsLines}\r\n            onSelect={handleCheckedSkill}\r\n          />\r\n        );\r\n        parentPositionNode = item.position;\r\n        generateNodes(\r\n          item,\r\n          topNode,\r\n          leftNode + 30,\r\n          parentPositionNode,\r\n          skills,\r\n          lineColor,\r\n          skillColor\r\n        );\r\n      });\r\n    }\r\n    return skills;\r\n  };\r\n\r\n  const generateMainBranch = (\r\n    items,\r\n    lineColor,\r\n    skillColor,\r\n    topInit,\r\n    leftInit\r\n  ) => {\r\n    let top = topInit;\r\n    let left = leftInit;\r\n    let parentPosition = null;\r\n    let first = true;\r\n    let skills = [];\r\n\r\n    items.forEach((item) => {\r\n      top += addTop(item.position, parentPosition, item.id);\r\n      left += addLeft(item.position, parentPosition, item.id);\r\n      parentPosition = item.position;\r\n\r\n      skills.push(\r\n        <Skill\r\n          firstSkill={first}\r\n          position={item.position}\r\n          top={top}\r\n          left={left}\r\n          isSquare={item.isSquare}\r\n          lineColor={lineColor}\r\n          skillColor={skillColor}\r\n          withoutLine={item.withoutLine}\r\n          imageSkill={item.image}\r\n          text={item.id}\r\n          parentsLines={item.parentsLines}\r\n        />\r\n      );\r\n      skills = generateNodes(\r\n        item,\r\n        top + 30,\r\n        left + 15,\r\n        parentPosition,\r\n        skills,\r\n        lineColor,\r\n        skillColor\r\n      );\r\n    });\r\n    return skills;\r\n  };\r\n\r\n  return (\r\n    data && (\r\n      <div style={{ margin: \"0 auto\", width: \"1000px\" }}>\r\n        <Row>\r\n          <Col\r\n            style={{\r\n              paddingTop: \"350px\",\r\n            }}\r\n          >\r\n            <RootSkillTree\r\n              skillColor={data.skillColor}\r\n              lineColor={data.lineColor}\r\n            />\r\n            <div style={{ position: \"relative\" }} id=\"container\">\r\n              {renderSkillTree()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nSkillTree.propTypes = {\r\n  character: PropTypes.string,\r\n  visual: PropTypes.bool,\r\n  points: PropTypes.number,\r\n};\r\n\r\nexport default SkillTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}