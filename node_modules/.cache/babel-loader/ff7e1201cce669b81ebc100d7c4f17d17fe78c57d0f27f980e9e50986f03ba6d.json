{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\App Web\\\\skill-tree\\\\src\\\\skillTree\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"antd\";\nimport styled from \"styled-components\";\nimport Skill from \"./skill\";\nimport { addLeft, addTop } from \"../utils/position\";\nimport { getDataSkillTree } from \"../utils/data\";\nimport Line from \"./line\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyled = styled.div`\n  position: absolute;\n  top: ${props => props.top};\n  left: ${props => props.left};\n`;\n_c = RootStyled;\nconst SkillTree = ({\n  character,\n  visual,\n  points\n}) => {\n  _s();\n  const [skills, setSkills] = useState(null);\n  const [remainingPoints, setRemainingPoints] = useState(points);\n  const renderSkillTree = () => {\n    const {\n      itemsRoot,\n      itemsFirst,\n      itemsSecond,\n      itemsThird,\n      itemsFourth,\n      lineColor,\n      skillColor\n    } = skills;\n    let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\n    skills = [generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450), generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0), generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450), generateMainBranch(itemsThird, lineColor, skillColor, 0, 480), generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900)];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: skills\n    }, void 0, false);\n  };\n  const handleCheckedSkill = checked => {\n    if (checked) {\n      setRemainingPoints(remainingPoints - 1);\n    } else {\n      setRemainingPoints(remainingPoints + 1);\n    }\n  };\n  useEffect(() => {\n    setSkills(getDataSkillTree(character));\n  }, [character, setSkills]);\n  const getSkill = (item, top, left, lineColor, skillColor, first) => {\n    return /*#__PURE__*/_jsxDEV(Skill, {\n      firstSkill: first,\n      position: item.position,\n      top: top,\n      left: left,\n      isSquare: item.isSquare,\n      lineColor: lineColor,\n      skillColor: skillColor,\n      imageSkill: item.image,\n      text: item.id,\n      parentsLines: item.parentsLines,\n      onSelect: handleCheckedSkill,\n      visual: visual,\n      withoutLine: item.withoutLine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  };\n  const generateNodes = (item, top, left, parentPosition, skills, lineColor, skillColor) => {\n    if (item.nodes && item.nodes.length > 0) {\n      let topNode = top;\n      let leftNode = left;\n      let parentPositionNode = parentPosition;\n      item.nodes.forEach(item => {\n        topNode += addTop(item.position, parentPositionNode, item.id);\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\n        skills.push(getSkill(item, topNode, leftNode, lineColor, skillColor, false));\n        parentPositionNode = item.position;\n        generateNodes(item, topNode, leftNode + 30, parentPositionNode, skills, lineColor, skillColor);\n      });\n    }\n    return skills;\n  };\n  const generateMainBranch = (items, lineColor, skillColor, topInit, leftInit) => {\n    let top = topInit;\n    let left = leftInit;\n    let parentPosition = null;\n    let first = true;\n    let skills = [];\n    items.forEach(item => {\n      top += addTop(item.position, parentPosition, item.id);\n      left += addLeft(item.position, parentPosition, item.id);\n      parentPosition = item.position;\n      skills.push(getSkill(item, top, left, lineColor, skillColor, first));\n      skills = generateNodes(item, top + 30, left + 15, parentPosition, skills, lineColor, skillColor);\n    });\n    return skills;\n  };\n  console.log(skills);\n  return skill && /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"0 auto\",\n      width: \"1000px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          paddingTop: \"350px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(RootStyled, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            top: -414,\n            left: 451,\n            color: skills.lineColor,\n            rotation: 90,\n            translate: \"0,0\",\n            length: 903\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"relative\"\n          },\n          id: \"container\",\n          children: renderSkillTree()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 7\n  }, this);\n};\n_s(SkillTree, \"0aujc8jZl+LV2/oXePhzpJVBf6A=\");\n_c2 = SkillTree;\nSkillTree.propTypes = {\n  character: PropTypes.string,\n  visual: PropTypes.bool,\n  points: PropTypes.number\n};\nexport default SkillTree;\nvar _c, _c2;\n$RefreshReg$(_c, \"RootStyled\");\n$RefreshReg$(_c2, \"SkillTree\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","Col","Row","styled","Skill","addLeft","addTop","getDataSkillTree","Line","Fragment","_Fragment","jsxDEV","_jsxDEV","RootStyled","div","props","top","left","_c","SkillTree","character","visual","points","_s","skills","setSkills","remainingPoints","setRemainingPoints","renderSkillTree","itemsRoot","itemsFirst","itemsSecond","itemsThird","itemsFourth","lineColor","skillColor","generateMainBranch","children","handleCheckedSkill","checked","getSkill","item","first","firstSkill","position","isSquare","imageSkill","image","text","id","parentsLines","onSelect","withoutLine","fileName","_jsxFileName","lineNumber","columnNumber","generateNodes","parentPosition","nodes","length","topNode","leftNode","parentPositionNode","forEach","push","items","topInit","leftInit","console","log","skill","style","margin","width","paddingTop","color","rotation","translate","_c2","propTypes","string","bool","number","$RefreshReg$"],"sources":["D:/Documents/App Web/skill-tree/src/skillTree/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport Skill from \"./skill\";\r\nimport { addLeft, addTop } from \"../utils/position\";\r\nimport { getDataSkillTree } from \"../utils/data\";\r\nimport Line from \"./line\";\r\n\r\nconst RootStyled = styled.div`\r\n  position: absolute;\r\n  top: ${(props) => props.top};\r\n  left: ${(props) => props.left};\r\n`;\r\n\r\nconst SkillTree = ({ character, visual, points }) => {\r\n  const [skills, setSkills] = useState(null);\r\n  const [remainingPoints, setRemainingPoints] = useState(points);\r\n  const renderSkillTree = () => {\r\n    const {\r\n      itemsRoot,\r\n      itemsFirst,\r\n      itemsSecond,\r\n      itemsThird,\r\n      itemsFourth,\r\n      lineColor,\r\n      skillColor,\r\n    } = skills;\r\n    let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\r\n    skills = [\r\n      generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450),\r\n      generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0),\r\n      generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450),\r\n      generateMainBranch(itemsThird, lineColor, skillColor, 0, 480),\r\n      generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900),\r\n    ];\r\n\r\n    return <>{skills}</>;\r\n  };\r\n\r\n  const handleCheckedSkill = (checked) => {\r\n    if (checked) {\r\n      setRemainingPoints(remainingPoints - 1);\r\n    } else {\r\n      setRemainingPoints(remainingPoints + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSkills(getDataSkillTree(character));\r\n  }, [character, setSkills]);\r\n\r\n  const getSkill = (item, top, left, lineColor, skillColor, first) => {\r\n    return (\r\n      <Skill\r\n        firstSkill={first}\r\n        position={item.position}\r\n        top={top}\r\n        left={left}\r\n        isSquare={item.isSquare}\r\n        lineColor={lineColor}\r\n        skillColor={skillColor}\r\n        imageSkill={item.image}\r\n        text={item.id}\r\n        parentsLines={item.parentsLines}\r\n        onSelect={handleCheckedSkill}\r\n        visual={visual}\r\n        withoutLine={item.withoutLine}\r\n      />\r\n    );\r\n  };\r\n\r\n  const generateNodes = (\r\n    item,\r\n    top,\r\n    left,\r\n    parentPosition,\r\n    skills,\r\n    lineColor,\r\n    skillColor\r\n  ) => {\r\n    if (item.nodes && item.nodes.length > 0) {\r\n      let topNode = top;\r\n      let leftNode = left;\r\n      let parentPositionNode = parentPosition;\r\n      item.nodes.forEach((item) => {\r\n        topNode += addTop(item.position, parentPositionNode, item.id);\r\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\r\n        skills.push(\r\n          getSkill(item, topNode, leftNode, lineColor, skillColor, false)\r\n        );\r\n        parentPositionNode = item.position;\r\n        generateNodes(\r\n          item,\r\n          topNode,\r\n          leftNode + 30,\r\n          parentPositionNode,\r\n          skills,\r\n          lineColor,\r\n          skillColor\r\n        );\r\n      });\r\n    }\r\n    return skills;\r\n  };\r\n\r\n  const generateMainBranch = (\r\n    items,\r\n    lineColor,\r\n    skillColor,\r\n    topInit,\r\n    leftInit\r\n  ) => {\r\n    let top = topInit;\r\n    let left = leftInit;\r\n    let parentPosition = null;\r\n    let first = true;\r\n    let skills = [];\r\n\r\n    items.forEach((item) => {\r\n      top += addTop(item.position, parentPosition, item.id);\r\n      left += addLeft(item.position, parentPosition, item.id);\r\n      parentPosition = item.position;\r\n\r\n      skills.push(getSkill(item, top, left, lineColor, skillColor, first));\r\n      skills = generateNodes(\r\n        item,\r\n        top + 30,\r\n        left + 15,\r\n        parentPosition,\r\n        skills,\r\n        lineColor,\r\n        skillColor\r\n      );\r\n    });\r\n    return skills;\r\n  };\r\nconsole.log(skills)\r\n  return (\r\n    skill && (\r\n      <div style={{ margin: \"0 auto\", width: \"1000px\" }}>\r\n        <Row>\r\n          <Col\r\n            style={{\r\n              paddingTop: \"350px\",\r\n            }}\r\n          >\r\n            <RootStyled>\r\n              <Line\r\n                top={-414}\r\n                left={451}\r\n                color={skills.lineColor}\r\n                rotation={90}\r\n                translate={\"0,0\"}\r\n                length={903}\r\n              />\r\n            </RootStyled>\r\n            <div style={{ position: \"relative\" }} id=\"container\">\r\n              {renderSkillTree()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nSkillTree.propTypes = {\r\n  character: PropTypes.string,\r\n  visual: PropTypes.bool,\r\n  points: PropTypes.number,\r\n};\r\n\r\nexport default SkillTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}