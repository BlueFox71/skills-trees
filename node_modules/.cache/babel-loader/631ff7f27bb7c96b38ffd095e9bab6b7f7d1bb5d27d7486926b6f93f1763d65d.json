{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\App Web\\\\skill-tree\\\\src\\\\skillTree\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"antd\";\nimport styled from \"styled-components\";\nimport Skill from \"./skill\";\nimport { addLeft, addTop } from \"../utils/position\";\nimport { getDataSkillTree } from \"../utils/data\";\nimport Line from \"./line\";\nimport { STATUS_SKILL } from \"../utils/enum\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyled = styled.div`\n  position: absolute;\n  top: ${props => props.top};\n  left: ${props => props.left};\n`;\n_c = RootStyled;\nconst SkillTree = ({\n  character,\n  visual,\n  points\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [rootLineColor, setRootLineColor] = useState(\"gray\");\n  const [currentSkills, setCurrentSkills] = useState([]);\n  const [remainingPoints, setRemainingPoints] = useState(points);\n  useEffect(() => {\n    setData(getDataSkillTree(character));\n  }, [character, setData]);\n  const getSkill = useCallback((item, top, left, lineColor, skillColor, first) => {\n    const handleSelectSkill = item => {\n      if (!visual) {\n        const childrens = currentSkills.filter(x => {\n          var _x$props$item$parentI;\n          return (_x$props$item$parentI = x.props.item.parentId) === null || _x$props$item$parentI === void 0 ? void 0 : _x$props$item$parentI.includes(item.id);\n        });\n        console.log(currentSkills, childrens, item);\n        if (item.status === STATUS_SKILL.CAN_BE_SELECTED) {\n          //talent sélectionné\n          setRemainingPoints(remainingPoints - 1);\n          item.status = STATUS_SKILL.IS_SELECTED;\n          childrens.forEach(child => {\n            child.props.item.status = STATUS_SKILL.CAN_BE_SELECTED;\n            if (child.props.item.parentId[0] === item.id) {\n              child.props.item.hasLineColor = true;\n            } else if (child.props.item.parentId.length === 2 && child.props.item.parentId[1] === item.id) {\n              child.props.item.hasLineColor = true;\n            }\n            const skill = currentSkills.find(x => {\n              var _x$props$item$parentI2;\n              return (_x$props$item$parentI2 = x.props.item.parentId) === null || _x$props$item$parentI2 === void 0 ? void 0 : _x$props$item$parentI2.includes(item.id);\n            });\n            if (currentSkills.find(x => {\n              var _x$props$item$parentI3;\n              return (_x$props$item$parentI3 = x.props.item.parentId) === null || _x$props$item$parentI3 === void 0 ? void 0 : _x$props$item$parentI3.includes(item.id);\n            })) {}\n          });\n          if (item.id === \"r-4\") {\n            setRootLineColor(lineColor);\n          }\n        } else if (\n        //talent désélectionné\n        item.status === STATUS_SKILL.IS_SELECTED && item.id !== \"r-1\") {\n          let hasSelectedChild = false;\n          childrens.forEach(child => {\n            if (child.props.item.status === STATUS_SKILL.IS_SELECTED) {\n              hasSelectedChild = true;\n            }\n          });\n          console.log(hasSelectedChild);\n          if (!hasSelectedChild) {\n            setRemainingPoints(remainingPoints + 1);\n            item.status = STATUS_SKILL.CAN_BE_SELECTED;\n            if (item.id === \"r-4\") {\n              setRootLineColor(\"gray\");\n            }\n            childrens.forEach(child => {\n              child.props.item.status = STATUS_SKILL.CANNOT_BE_SELECTED;\n            });\n          }\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Skill, {\n      item: item,\n      firstSkill: first,\n      top: top,\n      left: left,\n      lineColor: lineColor,\n      skillColor: skillColor,\n      onSelect: handleSelectSkill,\n      visual: visual\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this);\n  }, [visual, remainingPoints, currentSkills]);\n  const generateNodes = useCallback((item, top, left, parentPosition, skills, lineColor, skillColor) => {\n    if (item.nodes && item.nodes.length > 0) {\n      let topNode = top;\n      let leftNode = left;\n      let parentPositionNode = parentPosition;\n      item.nodes.forEach(item => {\n        topNode += addTop(item.position, parentPositionNode, item.id);\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\n        skills.push(getSkill(item, topNode, leftNode, lineColor, skillColor, false));\n        parentPositionNode = item.position;\n        generateNodes(item, topNode, leftNode + 30, parentPositionNode, skills, lineColor, skillColor);\n      });\n    }\n    return skills;\n  }, [getSkill]);\n  const generateMainBranch = useCallback((items, lineColor, skillColor, topInit, leftInit) => {\n    let top = topInit;\n    let left = leftInit;\n    let parentPosition = null;\n    let first = true;\n    let skills = [];\n    items.forEach(item => {\n      top += addTop(item.position, parentPosition, item.id);\n      left += addLeft(item.position, parentPosition, item.id);\n      parentPosition = item.position;\n      skills.push(getSkill(item, top, left, lineColor, skillColor, first));\n      skills = generateNodes(item, top + 30, left + 15, parentPosition, skills, lineColor, skillColor);\n    });\n    return skills;\n  }, [generateNodes, getSkill]);\n  const renderSkillTree = useCallback(() => {\n    if (data && character) {\n      const {\n        itemsRoot,\n        itemsFirst,\n        itemsSecond,\n        itemsThird,\n        itemsFourth,\n        lineColor,\n        skillColor\n      } = data;\n      let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\n      skills = [...generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450), ...generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0), ...generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450), ...generateMainBranch(itemsThird, lineColor, skillColor, 0, 480), ...generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900)];\n      setCurrentSkills(skills);\n    }\n  }, [character, data, generateMainBranch]);\n  useEffect(() => {\n    renderSkillTree();\n  }, [renderSkillTree]);\n  return currentSkills && currentSkills.length && /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"0 auto\",\n      width: \"1000px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          paddingTop: \"350px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(RootStyled, {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            top: -414,\n            left: 451,\n            color: rootLineColor,\n            rotation: 90,\n            translate: \"0,0\",\n            length: 903\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"relative\"\n          },\n          id: \"container\",\n          children: currentSkills\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 7\n  }, this);\n};\n_s(SkillTree, \"/Agv4rhI3m1RkFw5sOR3r/dVhws=\");\n_c2 = SkillTree;\nSkillTree.propTypes = {\n  character: PropTypes.string,\n  visual: PropTypes.bool,\n  points: PropTypes.number\n};\nexport default SkillTree;\nvar _c, _c2;\n$RefreshReg$(_c, \"RootStyled\");\n$RefreshReg$(_c2, \"SkillTree\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","PropTypes","Col","Row","styled","Skill","addLeft","addTop","getDataSkillTree","Line","STATUS_SKILL","jsxDEV","_jsxDEV","RootStyled","div","props","top","left","_c","SkillTree","character","visual","points","_s","data","setData","rootLineColor","setRootLineColor","currentSkills","setCurrentSkills","remainingPoints","setRemainingPoints","getSkill","item","lineColor","skillColor","first","handleSelectSkill","childrens","filter","x","_x$props$item$parentI","parentId","includes","id","console","log","status","CAN_BE_SELECTED","IS_SELECTED","forEach","child","hasLineColor","length","skill","find","_x$props$item$parentI2","_x$props$item$parentI3","hasSelectedChild","CANNOT_BE_SELECTED","firstSkill","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","generateNodes","parentPosition","skills","nodes","topNode","leftNode","parentPositionNode","position","push","generateMainBranch","items","topInit","leftInit","renderSkillTree","itemsRoot","itemsFirst","itemsSecond","itemsThird","itemsFourth","style","margin","width","children","paddingTop","color","rotation","translate","_c2","propTypes","string","bool","number","$RefreshReg$"],"sources":["D:/Documents/App Web/skill-tree/src/skillTree/index.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport Skill from \"./skill\";\r\nimport { addLeft, addTop } from \"../utils/position\";\r\nimport { getDataSkillTree } from \"../utils/data\";\r\nimport Line from \"./line\";\r\nimport { STATUS_SKILL } from \"../utils/enum\";\r\n\r\nconst RootStyled = styled.div`\r\n  position: absolute;\r\n  top: ${(props) => props.top};\r\n  left: ${(props) => props.left};\r\n`;\r\n\r\nconst SkillTree = ({ character, visual, points }) => {\r\n  const [data, setData] = useState(null);\r\n  const [rootLineColor, setRootLineColor] = useState(\"gray\");\r\n  const [currentSkills, setCurrentSkills] = useState([]);\r\n  const [remainingPoints, setRemainingPoints] = useState(points);\r\n\r\n  useEffect(() => {\r\n    setData(getDataSkillTree(character));\r\n  }, [character, setData]);\r\n\r\n  const getSkill = useCallback(\r\n    (item, top, left, lineColor, skillColor, first) => {\r\n      const handleSelectSkill = (item) => {\r\n        if (!visual) {\r\n          const childrens = currentSkills.filter((x) =>\r\n            x.props.item.parentId?.includes(item.id)\r\n          );\r\n          console.log(currentSkills, childrens, item);\r\n          if (item.status === STATUS_SKILL.CAN_BE_SELECTED) {\r\n            //talent sélectionné\r\n            setRemainingPoints(remainingPoints - 1);\r\n            item.status = STATUS_SKILL.IS_SELECTED;\r\n            childrens.forEach((child) => {\r\n              child.props.item.status = STATUS_SKILL.CAN_BE_SELECTED;\r\n              if (child.props.item.parentId[0] === item.id) {\r\n                child.props.item.hasLineColor = true;\r\n              } else if (\r\n                child.props.item.parentId.length === 2 &&\r\n                child.props.item.parentId[1] === item.id\r\n              ) {\r\n                child.props.item.hasLineColor = true;\r\n              }\r\n              const skill = currentSkills.find((x) =>\r\n              x.props.item.parentId?.includes(item.id)\r\n            )\r\n              if(currentSkills.find((x) =>\r\n              x.props.item.parentId?.includes(item.id)\r\n            )){\r\n\r\n            }\r\n            });\r\n            if (item.id === \"r-4\") {\r\n              setRootLineColor(lineColor);\r\n            }\r\n          } else if (\r\n            //talent désélectionné\r\n            item.status === STATUS_SKILL.IS_SELECTED &&\r\n            item.id !== \"r-1\"\r\n          ) {\r\n            let hasSelectedChild = false;\r\n            childrens.forEach((child) => {\r\n              if (child.props.item.status === STATUS_SKILL.IS_SELECTED) {\r\n                hasSelectedChild = true;\r\n              }\r\n            });\r\n            console.log(hasSelectedChild);\r\n            if (!hasSelectedChild) {\r\n              setRemainingPoints(remainingPoints + 1);\r\n              item.status = STATUS_SKILL.CAN_BE_SELECTED;\r\n              if (item.id === \"r-4\") {\r\n                setRootLineColor(\"gray\");\r\n              }\r\n              childrens.forEach((child) => {\r\n                child.props.item.status = STATUS_SKILL.CANNOT_BE_SELECTED;\r\n              });\r\n            }\r\n          }\r\n        }\r\n      };\r\n      return (\r\n        <Skill\r\n          item={item}\r\n          firstSkill={first}\r\n          top={top}\r\n          left={left}\r\n          lineColor={lineColor}\r\n          skillColor={skillColor}\r\n          onSelect={handleSelectSkill}\r\n          visual={visual}\r\n        />\r\n      );\r\n    },\r\n    [visual, remainingPoints, currentSkills]\r\n  );\r\n\r\n  const generateNodes = useCallback(\r\n    (item, top, left, parentPosition, skills, lineColor, skillColor) => {\r\n      if (item.nodes && item.nodes.length > 0) {\r\n        let topNode = top;\r\n        let leftNode = left;\r\n        let parentPositionNode = parentPosition;\r\n        item.nodes.forEach((item) => {\r\n          topNode += addTop(item.position, parentPositionNode, item.id);\r\n          leftNode += addLeft(item.position, parentPositionNode, item.id);\r\n          skills.push(\r\n            getSkill(item, topNode, leftNode, lineColor, skillColor, false)\r\n          );\r\n          parentPositionNode = item.position;\r\n          generateNodes(\r\n            item,\r\n            topNode,\r\n            leftNode + 30,\r\n            parentPositionNode,\r\n            skills,\r\n            lineColor,\r\n            skillColor\r\n          );\r\n        });\r\n      }\r\n      return skills;\r\n    },\r\n    [getSkill]\r\n  );\r\n\r\n  const generateMainBranch = useCallback(\r\n    (items, lineColor, skillColor, topInit, leftInit) => {\r\n      let top = topInit;\r\n      let left = leftInit;\r\n      let parentPosition = null;\r\n      let first = true;\r\n      let skills = [];\r\n\r\n      items.forEach((item) => {\r\n        top += addTop(item.position, parentPosition, item.id);\r\n        left += addLeft(item.position, parentPosition, item.id);\r\n        parentPosition = item.position;\r\n\r\n        skills.push(getSkill(item, top, left, lineColor, skillColor, first));\r\n        skills = generateNodes(\r\n          item,\r\n          top + 30,\r\n          left + 15,\r\n          parentPosition,\r\n          skills,\r\n          lineColor,\r\n          skillColor\r\n        );\r\n      });\r\n      return skills;\r\n    },\r\n    [generateNodes, getSkill]\r\n  );\r\n\r\n  const renderSkillTree = useCallback(() => {\r\n    if (data && character) {\r\n      const {\r\n        itemsRoot,\r\n        itemsFirst,\r\n        itemsSecond,\r\n        itemsThird,\r\n        itemsFourth,\r\n        lineColor,\r\n        skillColor,\r\n      } = data;\r\n      let skills = generateMainBranch(itemsFirst, lineColor, skillColor, 0);\r\n      skills = [\r\n        ...generateMainBranch(itemsRoot, lineColor, skillColor, -385, 450),\r\n        ...generateMainBranch(itemsFirst, lineColor, skillColor, 0, 0),\r\n        ...generateMainBranch(itemsSecond, lineColor, skillColor, 0, 450),\r\n        ...generateMainBranch(itemsThird, lineColor, skillColor, 0, 480),\r\n        ...generateMainBranch(itemsFourth, lineColor, skillColor, 0, 900),\r\n      ];\r\n      setCurrentSkills(skills);\r\n    }\r\n  }, [character, data, generateMainBranch]);\r\n\r\n  useEffect(() => {\r\n    renderSkillTree();\r\n  }, [renderSkillTree]);\r\n\r\n  return (\r\n    currentSkills &&\r\n    currentSkills.length && (\r\n      <div style={{ margin: \"0 auto\", width: \"1000px\" }}>\r\n        <Row>\r\n          <Col\r\n            style={{\r\n              paddingTop: \"350px\",\r\n            }}\r\n          >\r\n            <RootStyled>\r\n              <Line\r\n                top={-414}\r\n                left={451}\r\n                color={rootLineColor}\r\n                rotation={90}\r\n                translate={\"0,0\"}\r\n                length={903}\r\n              />\r\n            </RootStyled>\r\n            <div style={{ position: \"relative\" }} id=\"container\">\r\n              {currentSkills}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nSkillTree.propTypes = {\r\n  character: PropTypes.string,\r\n  visual: PropTypes.bool,\r\n  points: PropTypes.number,\r\n};\r\n\r\nexport default SkillTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}