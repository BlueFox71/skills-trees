{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\App Web\\\\skill-tree\\\\src\\\\skillTree\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row } from \"antd\";\nimport Skill from \"./skill\";\nimport backgroundPaladin from \"../asserts/images/paladin/background_paladin.png\";\nimport styled from \"styled-components\";\nimport RootSkillTree from \"./rootSkillTree\";\nimport { addLeft, addTop } from \"../utils/position\";\nimport { getDataSkillTree } from \"../utils/data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BackgroundImage = styled.div`\n  position: absolute;\n  background-image: url(${backgroundPaladin});\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 1700px;\n  height: 1800px;\n  opacity: 0.6;\n  margin-left: -500px;\n`;\n_c = BackgroundImage;\nconst SkillTree = ({\n  character\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [container, setContainer] = useState(null);\n  useEffect(() => {\n    setContainer(document.getElementById(\"container\"));\n  }, [container]);\n  useEffect(() => {\n    setData(getDataSkillTree(character));\n    if (container) {\n      renderSkillTree();\n    }\n  }, [character, setData, renderSkillTree, container]);\n  const generateNodes = (item, top, left, parentPosition, skills, lineColor, skillColor) => {\n    if (item.nodes && item.nodes.length > 0) {\n      let topNode = top;\n      let leftNode = left;\n      let parentPositionNode = parentPosition;\n      item.nodes.forEach(item => {\n        topNode += addTop(item.position, parentPositionNode, item.id);\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\n        skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n          position: item.position,\n          top: topNode,\n          left: leftNode,\n          isSquare: item.isSquare,\n          lineColor: lineColor,\n          skillColor: skillColor,\n          imageSkill: item.image,\n          text: item.id,\n          parentsLines: item.parentsLines\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this));\n        parentPositionNode = item.position;\n        generateNodes(item, topNode, leftNode + 30, parentPositionNode, skills, lineColor, skillColor);\n      });\n    }\n    return skills;\n  };\n  const generateMainBranch = (items, lineColor, skillColor, topInit, leftInit) => {\n    let top = topInit;\n    let left = leftInit;\n    let parentPosition = null;\n    let first = true;\n    let skills = [];\n    items.forEach(item => {\n      top += addTop(item.position, parentPosition, item.id);\n      left += addLeft(item.position, parentPosition, item.id);\n      parentPosition = item.position;\n      skills.push( /*#__PURE__*/_jsxDEV(Skill, {\n        firstSkill: first,\n        position: item.position,\n        top: top,\n        left: left,\n        isSquare: item.isSquare,\n        lineColor: lineColor,\n        skillColor: skillColor,\n        withoutLine: item.withoutLine,\n        imageSkill: item.image,\n        text: item.id,\n        parentsLines: item.parentsLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this));\n      skills = generateNodes(item, top + 30, left + 15, parentPosition, skills, lineColor, skillColor);\n    });\n    return skills;\n  };\n  return data && /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BackgroundImage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        style: {\n          paddingTop: \"350px\",\n          paddingLeft: \"50px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(RootSkillTree, {\n          skillColor: data.skillColor,\n          lineColor: data.lineColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"relative\"\n          },\n          id: \"container\",\n          children: renderSkillTree()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(SkillTree, \"YjN4NJz+HtMk/tsPgKG8ud8szlI=\");\n_c2 = SkillTree;\nSkillTree.propTypes = {\n  character: PropTypes.string\n};\nexport default SkillTree;\nvar _c, _c2;\n$RefreshReg$(_c, \"BackgroundImage\");\n$RefreshReg$(_c2, \"SkillTree\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","Col","Row","Skill","backgroundPaladin","styled","RootSkillTree","addLeft","addTop","getDataSkillTree","jsxDEV","_jsxDEV","Fragment","_Fragment","BackgroundImage","div","_c","SkillTree","character","_s","data","setData","container","setContainer","document","getElementById","renderSkillTree","generateNodes","item","top","left","parentPosition","skills","lineColor","skillColor","nodes","length","topNode","leftNode","parentPositionNode","forEach","position","id","push","isSquare","imageSkill","image","text","parentsLines","fileName","_jsxFileName","lineNumber","columnNumber","generateMainBranch","items","topInit","leftInit","first","firstSkill","withoutLine","children","style","paddingTop","paddingLeft","_c2","propTypes","string","$RefreshReg$"],"sources":["D:/Documents/App Web/skill-tree/src/skillTree/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nimport Skill from \"./skill\";\r\nimport backgroundPaladin from \"../asserts/images/paladin/background_paladin.png\";\r\n\r\nimport styled from \"styled-components\";\r\nimport RootSkillTree from \"./rootSkillTree\";\r\nimport { addLeft, addTop } from \"../utils/position\";\r\nimport { getDataSkillTree } from \"../utils/data\";\r\n\r\nconst BackgroundImage = styled.div`\r\n  position: absolute;\r\n  background-image: url(${backgroundPaladin});\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  width: 1700px;\r\n  height: 1800px;\r\n  opacity: 0.6;\r\n  margin-left: -500px;\r\n`;\r\n\r\nconst SkillTree = ({ character }) => {\r\n  const [data, setData] = useState(null);\r\n  const [container, setContainer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setContainer(document.getElementById(\"container\"));\r\n  }, [container]);\r\n\r\n  useEffect(() => {\r\n    setData(getDataSkillTree(character));\r\n    if (container) {\r\n      renderSkillTree();\r\n    }\r\n  }, [character, setData, renderSkillTree, container]);\r\n\r\n  const generateNodes = (\r\n    item,\r\n    top,\r\n    left,\r\n    parentPosition,\r\n    skills,\r\n    lineColor,\r\n    skillColor\r\n  ) => {\r\n    if (item.nodes && item.nodes.length > 0) {\r\n      let topNode = top;\r\n      let leftNode = left;\r\n      let parentPositionNode = parentPosition;\r\n      item.nodes.forEach((item) => {\r\n        topNode += addTop(item.position, parentPositionNode, item.id);\r\n        leftNode += addLeft(item.position, parentPositionNode, item.id);\r\n        skills.push(\r\n          <Skill\r\n            position={item.position}\r\n            top={topNode}\r\n            left={leftNode}\r\n            isSquare={item.isSquare}\r\n            lineColor={lineColor}\r\n            skillColor={skillColor}\r\n            imageSkill={item.image}\r\n            text={item.id}\r\n            parentsLines={item.parentsLines}\r\n          />\r\n        );\r\n        parentPositionNode = item.position;\r\n        generateNodes(\r\n          item,\r\n          topNode,\r\n          leftNode + 30,\r\n          parentPositionNode,\r\n          skills,\r\n          lineColor,\r\n          skillColor\r\n        );\r\n      });\r\n    }\r\n    return skills;\r\n  };\r\n\r\n  const generateMainBranch = (\r\n    items,\r\n    lineColor,\r\n    skillColor,\r\n    topInit,\r\n    leftInit\r\n  ) => {\r\n    let top = topInit;\r\n    let left = leftInit;\r\n    let parentPosition = null;\r\n    let first = true;\r\n    let skills = [];\r\n\r\n    items.forEach((item) => {\r\n      top += addTop(item.position, parentPosition, item.id);\r\n      left += addLeft(item.position, parentPosition, item.id);\r\n      parentPosition = item.position;\r\n\r\n      skills.push(\r\n        <Skill\r\n          firstSkill={first}\r\n          position={item.position}\r\n          top={top}\r\n          left={left}\r\n          isSquare={item.isSquare}\r\n          lineColor={lineColor}\r\n          skillColor={skillColor}\r\n          withoutLine={item.withoutLine}\r\n          imageSkill={item.image}\r\n          text={item.id}\r\n          parentsLines={item.parentsLines}\r\n        />\r\n      );\r\n      skills = generateNodes(\r\n        item,\r\n        top + 30,\r\n        left + 15,\r\n        parentPosition,\r\n        skills,\r\n        lineColor,\r\n        skillColor\r\n      );\r\n    });\r\n    return skills;\r\n  };\r\n\r\n  return (\r\n    data && (\r\n      <>\r\n        <BackgroundImage></BackgroundImage>\r\n        <Row>\r\n          <Col\r\n            style={{\r\n              paddingTop: \"350px\",\r\n              paddingLeft: \"50px\",\r\n            }}\r\n          >\r\n            <RootSkillTree\r\n              skillColor={data.skillColor}\r\n              lineColor={data.lineColor}\r\n            />\r\n            <div style={{ position: \"relative\" }} id=\"container\">\r\n              {renderSkillTree()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\nSkillTree.propTypes = {\r\n  character: PropTypes.string,\r\n};\r\n\r\nexport default SkillTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}